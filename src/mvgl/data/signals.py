import numpy as np
import networkx as nx
from scipy import linalg, sparse

from mvgl import _input_checks

def gen_smooth_gs(G, n_signals, filter="gaussian", alpha=10, noise_amount=0.1, 
                  rng=None):
    """Generate a set of smooth graph signals from a given graph.
    
    Smooth graph signal generation is based on [1] and is done by graph
    filtering a white noise signal. Let :math:`L = VDV^T` be the
    eigendecomposition of the graph Laplacian L. A smooth graph signal x is
    generated by:
    
    .. math:: x = Vh(D)y + e,
    where y is the graph Fourier transform of the white noise and e is the
    additive Gaussian noise. h(D) is the graph filter that makes x to be smooth
    over the graph. See [1] for different forms used for h(D).

    Parameters
    ----------
    G : nx.Graph
        An undirected graph.
    n_signals : int
        Number of signals to generate.
    filter : str, optional
        The filter to use to generate smooth signals. It can be 'gaussian',
        'tikhonov' or 'heat'. See [1] for further details, by default
        'gaussian' 
    alpha : float, optional
        A positive number used as the parameter for tikhonov filter and heat
        filter, by default 10. Ignored when the filter is gaussian.
    noise_amount : float, optional
        Amount of the noise to add the graph signals. Amount of the noise
        determined in L2-sense, that is if x is the clean signal |e|_2/|x|_2 =
        noise_amount, where e is the additive noise. By default 0.1.
    rng : np.random.Generator, optional
        Random number generator. If one wants the function to return the same 
        output every time, this needs to be set. By default None

    Returns
    -------
    X : np.array
        Generated smooth graph signals. Its dimension is (n_nodes, n_signals).
     
    References
    -------
    .. [1] Kalofolias, Vassilis. "How to learn a graph from smooth signals."
           Artificial Intelligence and Statistics. PMLR, 2016.
    """
    
    rng = _input_checks._check_rng(rng)

    n_nodes = G.number_of_nodes()

    # Generate white noise
    X0 = rng.multivariate_normal(np.zeros(n_nodes), np.eye(n_nodes), n_signals).T 

    # Get the graph Laplacian spectrum
    L = nx.laplacian_matrix(G).todense()
    e, V = linalg.eigh(L, overwrite_a=True)

    # Normalize the Laplacian such that |L|_2 = 1
    e[e < 1e-8] = 0
    e /= np.max(e)

    # Filtering to generate smooth graph signals from X0
    if filter == "gaussian":
        h = np.zeros(n_nodes)
        h[e > 0] = 1/np.sqrt(e[e>0])
    elif filter == "tikhonov":
        h = 1/(1+alpha*e)
    elif filter == "heat":
        h = np.exp(-alpha*e)

    X =V@np.diag(h)@V.T@X0

    # Add noise
    X_norm = np.linalg.norm(X)
    E = rng.normal(0, 1, X.shape)
    E_norm = np.linalg.norm(E)
    X += E*(noise_amount*X_norm/E_norm)

    return X

def gen_stationary_gs(G: nx.Graph, n_signals: int, filter_degree: int=5, 
                      noise_amount: float=0.1, rng: int | np.random.Generator = None):
    
    rng = _input_checks._check_rng(rng)

    n_nodes = G.number_of_nodes()
    adjacency = nx.adjacency_matrix(G).astype("float")

    # Normalize the laplacian: Not sure about this, but signals values are too 
    # big otherwise
    # max_eig = sparse.linalg.eigsh(laplacian, k=1)[0][0]
    # laplacian /= max_eig

    # Sample filter coefficients
    filter_coeffs = rng.normal(size=filter_degree)

    # Construct the graph filter
    filter_mat = np.zeros(shape=(n_nodes, n_nodes))
    curr_term = sparse.identity(n_nodes, format="csr")
    for i in range(filter_degree):
        filter_mat += filter_coeffs[i]*curr_term
        curr_term = curr_term@adjacency

    # Generate stationary signals
    white_noise = rng.multivariate_normal(
        np.zeros(n_nodes), np.eye(n_nodes), n_signals
    ).T 
    signals = filter_mat@white_noise

    # Add noise
    signals_norm = np.linalg.norm(signals)
    awgn = rng.normal(0, 1, signals.shape)
    awgn_norm = np.linalg.norm(awgn)
    signals += awgn*(noise_amount*signals_norm/awgn_norm)

    return signals